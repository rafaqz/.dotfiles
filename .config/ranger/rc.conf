# ===================================================================
# This file contains the default startup commands for ranger.
# To change them, it is recommended to create the file
# ~/.config/ranger/rc.conf and add your custom commands there.
#
# If you copy this whole file there, you may want to set the environment
# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
#
# The purpose of this file is mainly to define keybindings and settings.
# For running more complex python code, please create a plugin in "plugins/" or
# a command in "commands.py".
#
# Each line is a command that will be run before the user interface
# is initialized.  As a result, you can not use commands which rely
# on the UI such as :delete or :mark.
# ===================================================================

# ===================================================================
# == Options
# ===================================================================

# How many columns are there, and what are their relative widths?
set column_ratios 2,5,8

# Which files should be hidden? (regular expression)
set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

# Show hidden files? You can toggle this by typing 'zh'
set show_hidden false

# Ask for a confirmation when running the "delete" command?
# Valid values are "always" (default), "never", "multiple"
# With "multiple", ranger will ask only if you delete multiple files at once.
set confirm_on_delete multiple

# Which script is used to generate file previews?
# ranger ships with scope.sh, a script that calls external programs (see
# README for dependencies) to preview images, archives, etc.
set preview_script ~/.config/ranger/scope.sh

# Use the external preview script or display simple plain text previews?
set use_preview_script true

# Preview images in full color with the external command "w3mimgpreview"?
# This requires the console web browser "w3m" and a supported terminal.
# It has been successfully tested with "xterm" and "urxvt" without tmux.
set preview_images true

# Use a unicode "..." character to mark cut-off filenames?
set unicode_ellipsis false

# Show dotfiles in the bookmark preview box?
set show_hidden_bookmarks true

# Which colorscheme to use?  These colorschemes are available by default:
# default, jungle, snow
set colorscheme default

# Preview files on the rightmost column?
# And collapse (shrink) the last column if there is nothing to preview?
set preview_files true
set preview_directories true
set collapse_preview true

# Save the console history on exit?
set save_console_history true

# Draw the status bar on top of the browser window (default: bottom)
set status_bar_on_top false

# Draw a progress bar in the status bar which displays the average state of all
# currently running tasks which support progress bars?
set draw_progress_bar_in_status_bar true

# Draw borders around columns?
set draw_borders true

# Display the directory name in tabs?
set dirname_in_tabs true

# Enable the mouse support?
set mouse_enabled true

# Display the file size in the main column or status bar?
set display_size_in_main_column true
set display_size_in_status_bar true

# Display files tags in all columns or only in main column?
set display_tags_in_all_columns true

# Set a title for the window?
set update_title true

# Set the title to "ranger" in the tmux program?
set update_tmux_title false

# Shorten the title if it gets long?  The number defines how many
# directories are displayed at once, 0 turns off this feature.
set shorten_title 3

# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
set tilde_in_titlebar false

# How many directory-changes or console-commands should be kept in history?
set max_history_size 50
set max_console_history_size 50

# Try to keep so much space between the top/bottom border when scrolling:
set scroll_offset 8

# Flush the input after each key hit?  (Noticable when ranger lags)
set flushinput false

# Padding on the right when there's no preview?
# This allows you to click into the space to run the file.
set padding_right true

# Save bookmarks (used with mX and `X) instantly?
# This helps to synchronize bookmarks between multiple ranger
# instances but leads to *slight* performance loss.
# When false, bookmarks are saved when ranger is exited.
set autosave_bookmarks true

# You can display the "real" cumulative size of directories by using the
# command :get_cumulative_size or typing "dc".  The size is expensive to
# calculate and will not be updated automatically.  You can choose
# to update it automatically though by turning on this option:
set autoupdate_cumulative_size false

# Turning this on makes sense for screen readers:
set show_cursor false

# One of: size, basename, mtime, type
set sort natural

# Additional sorting options
set sort_reverse false
set sort_case_insensitive true
set sort_directories_first true

# Enable this if key combinations with the Alt Key don't work for you.
# (Especially on xterm)
set xterm_alt_key false

# Enable vcs support.
set vcs_aware false

# Enable git vcs backend, to show current commit, branch and repository status.
set vcs_backend_git enabled

# ===================================================================
# == Local Options
# ===================================================================
# You can set local options that only affect a single directory.

# Examples:
# setlocal path=~/downloads sort mtime

# ===================================================================
# == Command Aliases in the Console
# ===================================================================

alias e    edit
alias q    quit
alias q!   quitall
alias qall quitall
alias setl setlocal

# ===================================================================
# == Define keys for the browser
# ===================================================================

# Basic
map     Q quit!
map     q quit
copymap q ZZ ZQ

map R     reload_cwd
map <C-r> reset
map <C-l> redraw_window
map <C-c> abort
map <esc> change_mode normal

map i display_file
map ? help
map W display_log
map w taskview_open
map S shell $SHELL

map :  console
map ;  console
map !  console shell 
map @  console -p6 shell  %%s
map #  console shell -p 
map s  console shell 
map r  chain draw_possible_programs; console open_with 
map f  console find 
map cd console cd 

# Tagging / Marking
map tt      tag_toggle
map ut      tag_remove
map "<any>  tag_toggle tag=%any
map <Space> mark_files toggle=True
map v       mark_files all=True toggle=True
map uv      mark_files all=True val=False
map V       toggle_visual_mode
map uV      toggle_visual_mode reverse=True

# For the nostalgics: Midnight Commander bindings
map <F1> help
map <F3> display_file
map <F4> edit
map <F5> copy
map <F6> cut
map <F7> console mkdir 
map <F8> console delete
map <F10> exit

# In case you work on a keyboard with dvorak layout
map <UP>       move up=1
map <DOWN>     move down=1
map <LEFT>     move left=1
map <RIGHT>    move right=1
map <HOME>     move to=0
map <END>      move to=-1
map <PAGEDOWN> move down=1   pages=True
map <PAGEUP>   move up=1     pages=True
map <CR>       move right=1
map <DELETE>   console delete
map <INSERT>   console touch 

# VIM-like
copymap <UP>       k
copymap <DOWN>     j
copymap <LEFT>     h
copymap <RIGHT>    l
copymap <HOME>     gg
copymap <END>      G
copymap <PAGEDOWN> <C-F>
copymap <PAGEUP>   <C-B>

map J  move down=0.5  pages=True
map K  move up=0.5    pages=True
copymap J <C-D>
copymap K <C-U>

# Jumping around
map H     history_go -1
map L     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse

map gh cd ~
map ge cd /etc
map gu cd /usr
map gd cd /dev
map gl cd -r .
map gL cd -r %f
map go cd /opt
map gv cd /var
map gm cd /media
map gM cd /mnt
map gs cd /srv
map gr cd /
map gR eval fm.cd(ranger.RANGERDIR)
map g/ cd /

# External Programs
map E  edit
map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
map yp shell -d echo -n %d/%f | xsel -i
map yd shell -d echo -n %d    | xsel -i
map yf shell -d echo -n %f    | xsel -i


# ===========================================================================
# Custom
# ===========================================================================

map DD shell mv -t /home/raf/.local/share/Trash %s

# URXVT
map ,u shell urxvtr

# Vim.
map ,vv shell urxvtr -e vim -p %s
map ,sv console -p24 shell vim -p $(grep -rl  )
map ,vn shell urxvtr -e $HOME/bin/vim-server %s
map ,vs shell $HOME/bin/vim-server %s
map ,vd shell vimdiff %s
# Vim git diff relies on the vim fugitive plugin... but it allows tabbed diffs of all files unlike git difftool. The -p is for vim tabs, not rangers -p
map ,gvda shell vim -p +'tabdo Gdiff HEAD' 
map ,gvds shell vim -p +'tabdo Gdiff HEAD' %s
map ,gvdxa console -p32 shell vim -p +'tabdo Gdiff HEAD~'
map ,gvdxs console -p32 shell vim -p +'tabdo Gdiff HEAD~' %%s
# Vim open selected files tabbed in vim with urxvt shell.

# Git.
map ,gg chain toggle_option vcs_aware; reset;

# Git diffs.
map ,gda shell -p git diff HEAD
map ,gds shell -p git diff HEAD %%s
map ,gdca shell -p git diff --cached
map ,gdcs shell -p git diff --cached %%s
map ,gdd chain shell cd %%s; git diff HEAD
map ,gdxa console -p20 shell git diff HEAD~
map ,gdxs console -p20 shell git diff HEAD~ %%s
map ,gdxf console -p35 shell cd %%s; git diff HEAD~
# Git commit.
map ,gca console -p27 shell -p git commit -a -m ''  
map ,gcd console -p39 shell -p bash -vx ~/bin/commitfolders '' %%s
map ,gcs console -p24 shell -p git commit -m '' %%s 
map ,gcc console -p24 shell -p git commit -m ''  
map ,gcp console -p27 shell -p git commit -p -m '' %%s 
# Git checkout.
map ,gom shell -p git checkout master
map ,gox console shell -p git checkout 
map ,gosx console -p22 shell -p git checkout  %%s
map ,goax console -p22 shell -p git checkout  *
map ,gosh console -p27 shell -p git checkout HEAD~ %%s
map ,goah console -p27 shell -p git checkout HEAD~ *
map ,gosh shell -p git checkout HEAD %%s
map ,goah shell -p git checkout HEAD *
# Git branch.
map ,gbn console shell -p git branch 
map ,gbl shell -p git branch 
# Git add.
map ,gaa shell git add . -v
map ,gap shell git add --patch %s
map ,ga. shell git add . -v
map ,gad shell bash -vx ~/bin/addfolders %%s
map ,gas shell git add %%s -v; 
# Git remotes.
map ,grl shell git remote -v
map ,grrmo shell git remote rm origin
map ,grrmx console shell git remote rm
map ,gra console shell git remote add
map ,gro console shell git remote add origin 
# Git rebase
map ,grb console shell git rebase -i HEAD~
# Git remove
map ,grm shell -p git rm --force -r %%s 
# Git push.
map ,gpp shell -p git push 
map ,gpd shell -p bash -vx ~/bin/pushfolders %%s 
map ,gpa shell -p find . -maxdepth 1 -mindepth 1 -type d -exec sh -c '(cd {} && git push)' ';'
map ,gpu shell -p git push origin $(git rev-parse --abbrev-ref HEAD) --set-upstream
map ,gpx console -p22 shell -p git push origin 
# Git misc.
map ,gu chain shell -p git pull; reset; 
map ,gs shell -p git status
map ,gll shell -p git log -v
map ,gls shell -p git log -v %s
map ,gi shell -p git init
map ,gms console shell git mv %%s 

# Github.
map ,hnn shell -p hub create
map ,hnx console -p17 shell -p hub create 
map ,hc console -p16 shell -p hub clone 
# Open github page in browser, run key command to jump to awesome fm tag if browser is open.
map ,hbb chain shell hub browse; shell xdotool key 'super+p';
map ,hbi chain shell hub browse -- issues; shell xdotool key 'super+p';
map ,hbp chain shell hub browse -- pulls; shell xdotool key 'super+p';
map ,hbs chain shell hub browse -- settings; shell xdotool key 'super+p';
map ,hbw chain shell hub browse -- wiki; shell xdotool key 'super+p';
map ,hd chain shell hub compare master; shell xdotool key 'super+p';
map ,hf shell -p hub fork

# Drush.

# Drush features.
map ,dfes console p32 shell -p drush features-export %%s  -v --yes 
map ,dfus shell -p drush features-update %%s -v  --yes 
map ,dfua shell -p drush features-update-all -v --yes
map ,dfrs shell -p drush features-revert %%s -v --force --yes
map ,dfra shell -p drush features-revert-all -v --force --yes| less
map ,dfca shell -p drush features-components
map ,dfcs shell -p drush features-components --exported | grep %%s
map ,dfes console -p32 shell -p drush features-export %%s "" --yes 
map ,dfds shell -p drush features-diff %%s 
map ,dfda shell -p drush features-diff 
# Drush caches.
map ,dcca shell -p drush cache-clear all
map ,dccv shell -p drush cache-clear views
map ,dccx shell -p drush cache-clear
map ,dmc shell -p drush memcache-storage-flush-bin cache
# Drush variables.
map ,dvs console -p29 shell -p drush variable-set 
map ,dvg shell -p drush variable-get
# Drush logs and status.
map ,dwl shell -p drush watchdog-list
map ,dws shell -p drush watchdog-show
map ,dto shell -p drush devel-token
map ,dql shell -p drush queue-list
map ,dll shell -p drush libraries-list 
map ,dh shell -p drush
map ,ds shell -p drush status
map ,drq shell -p drush core-requirements
# Drush make and profile generation.
map ,dgm shell -p drush make-generate
map ,dgp shell -p drush generate-distro
map ,dco shell -p drush core-config
# Drush package management.
map ,dla shell -p drush pm-list
map ,dls shell -p drush pm-list | grep %%s
map ,dia shell -p drush pm-info
map ,dis shell -p drush pm-info %%s
map ,drln shell -p drush pm-releasenotes %%s
map ,drls shell -p drush pm-releases %%s
map ,dena shell -p drush pm-enable * -y -v
map ,dens shell -p drush pm-enable %%s  -y -v
map ,denx console -p25 shell -p drush pm-enable  -y -v
map ,ddl console -p27 shell -p drush pm-download  -y -v
map ,ddix console -p26 shell -p drush pm-disable  -y -v
map ,ddis shell -p drush pm-disable %%s -y -v
map ,ddia shell -p drush pm-disable * -y -v
# Views
map ,dvl shell -p drush views-list
map ,dva shell -p drush views-analyse
map ,dvr shell -p drush views-revert
# Module builder
map ,dmbp shell -p drush mb-docparams %%s
map ,dmbh shell -p drush mb-dochooks %%s
map ,dmbla shell -p drush mb-list
map ,dmbls shell -p drush mb-list %%s
map ,dmbaa shell -p drush mb-analyze
map ,dmbas shell -p drush mb-analyze %%s
map ,dmbb shell -p drush mb-build
# Other.
map ,dvt shell drush vimrc-tag-gen
map ,db shell google-chrome drupal.org/project/%%s; xdotool key 'super+p';

# Grep
map ,ss console -p53 shell -p grep -r --exclude={tags,*.log*,*sprockets*}  *

# Image actions.
map ,ira console -p25 shell -p mogrify -resize % *
map ,irs console -p25 shell -p mogrify -resize % %%s
map ,ioa shell -p mogrify -auto-orient *s
map ,ios shell -p mogrify -auto-orient %%s

# Autojump
map ,j console j 

# Start graphical filemanager in new thread.
map ,fm shell -f pcmanfm

map gk tab_move 1
map gj tab_move -1
map gN tab_restore

# ===================================================================
# Standard commands
# ===================================================================

# Filesystem Operations
map = chmod

map cw console rename 
map A  eval fm.open_console('rename ' + fm.thisfile.basename)
map I  eval fm.open_console('rename ' + fm.thisfile.basename, position=7)

map pp paste
map po paste overwrite=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree

map dd cut
map ud uncut
map da cut mode=add
map dd cut mode=remove

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove

# Temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching
map /  console search 
map n  search_next
map N  search_next forward=False
map ct search_next order=tag
map cs search_next order=size
map ci search_next order=mimetype
map cc search_next order=ctime
map cm search_next order=mtime
map ca search_next order=atime

# Tabs
map tn        tab_new ~
map tc        tab_close
map tk        tab_move 1
map tj        tab_move -1
map tu        tab_restore

map <C-n>     tab_new ~
map <C-w>     tab_close
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map <A-Right> tab_move 1
map <A-Left>  tab_move -1
map gt        tab_move 1
map gT        tab_move -1
map gn        tab_new ~
map gc        tab_close
map uq        tab_restore
map <a-1>     tab_open 1
map <a-2>     tab_open 2
map <a-3>     tab_open 3
map <a-4>     tab_open 4
map <a-5>     tab_open 5
map <a-6>     tab_open 6
map <a-7>     tab_open 7
map <a-8>     tab_open 8
map <a-9>     tab_open 9

# Sorting
map or toggle_option sort_reverse
map os chain set sort=size;      set sort_reverse=False
map ob chain set sort=basename;  set sort_reverse=False
map on chain set sort=natural;   set sort_reverse=False
map om chain set sort=mtime;     set sort_reverse=False
map oc chain set sort=ctime;     set sort_reverse=False
map oa chain set sort=atime;     set sort_reverse=False
map ot chain set sort=type;      set sort_reverse=False

map oS chain set sort=size;      set sort_reverse=True
map oB chain set sort=basename;  set sort_reverse=True
map oN chain set sort=natural;   set sort_reverse=True
map oM chain set sort=mtime;     set sort_reverse=True
map oC chain set sort=ctime;     set sort_reverse=True
map oA chain set sort=atime;     set sort_reverse=True
map oT chain set sort=type;      set sort_reverse=True

map dc get_cumulative_size

# Settings
map zc    toggle_option collapse_preview
map zd    toggle_option sort_directories_first
map zh    toggle_option show_hidden
map <C-h> toggle_option show_hidden
map zi    toggle_option flushinput
map zm    toggle_option mouse_enabled
map zp    toggle_option preview_files
map zP    toggle_option preview_directories
map zs    toggle_option sort_case_insensitive
map zu    toggle_option autoupdate_cumulative_size
map zv    toggle_option use_preview_script
map zf    console filter 

# Bookmarks
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map m<any>  set_bookmark %any
map um<any> unset_bookmark %any

map m<bg>   draw_bookmarks
copymap m<bg>  um<bg> `<bg> '<bg>

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -d chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -d chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -d chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -d chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -d chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -d chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -d chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -d chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -d chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -d chmod u-{0} %s".format(arg))

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# And of course the emacs way
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>

# Basic
pmap     <ESC> pager_close
copypmap <ESC> q Q i <F3>
pmap E      edit_file

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>
